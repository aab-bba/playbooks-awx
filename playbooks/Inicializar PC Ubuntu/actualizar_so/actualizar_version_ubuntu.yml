- name: Actualizar sistema operativo Ubuntu
  hosts: pendientes
  gather_facts: no
  become: true

  vars:
    playbook_nombre: "FU04 - actualizar_version_ubuntu"
    tarea_1: "Tarea 1 - Comprobar versión actual"
    tarea_2: "Tarea 2 - Ejecutar do-release-upgrade"
    tarea_3: "Tarea 3 - Reiniciar si es necesario"

  tasks:
    - name: Tarea 0 - Generar timestamp único para esta ejecución
      set_fact:
        playbook_id: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
      run_once: true

# ---------------- COMPROBAR VERSIÓN ----------------
    - name: Tarea 1.1 - Obtener versión actual de Ubuntu
      command: lsb_release -r
      register: resultado_tarea_1
      changed_when: false
      ignore_errors: true

    - name: Tarea 1.2 - Procesar versión actual
      set_fact:
        version_actual: "{{ resultado_tarea_1.stdout | regex_search('([0-9]+\\.[0-9]+)', '\\1') }}"
        is_ok_1: "{{ 0 if resultado_tarea_1.rc != 0 else 1 }}"
        help_message_1: "Verifica si el paquete 'lsb-release' está instalado."
      when: resultado_tarea_1.rc is defined and resultado_tarea_1.rc != 0

    - name: Tarea 1.3 - Registrar versión actual en BBDD
      community.mysql.mysql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_name }}"
        query: >
          INSERT INTO {{ db_table }} (
            host_id, playbook, playbook_uid, task_name, is_ok, task_message, help_message, created, modified
          ) VALUES (
            {{ hostvars[inventory_hostname].equipo_id | default('NULL') }},
            '{{ playbook_nombre }}',
            '{{ playbook_id }}',
            '{{ tarea_1 }}',
            {{ is_ok_1 | default(1) }},
            '{{ resultado_tarea_1.stdout | default("Sin resultado") | replace("'", "''") }}',
            '{{ help_message_1 | default("") | replace("'", "''") }}',
            NOW(),
            NOW()
          );
      delegate_to: localhost
      become: false

# ---------------- UPGRADE DE VERSIÓN ----------------
    - name: Tarea 2.1 - Ejecutar do-release-upgrade en modo no interactivo
      command: do-release-upgrade -f DistUpgradeViewNonInteractive -q
      register: resultado_tarea_2
      environment:
        DEBIAN_FRONTEND: noninteractive
      ignore_errors: true
      when: version_actual is defined and version_actual != "24.04"

    - name: Tarea 2.2 - Mensaje de ayuda si falla el upgrade
      set_fact:
        is_ok_2: 0
        help_message_2: "Verifica que 'update-manager-core' esté instalado, o ejecuta 'do-release-upgrade' manualmente."
      when: resultado_tarea_2.unreachable | default(false) or
            (resultado_tarea_2.rc is defined and resultado_tarea_2.rc != 0)

    - name: Tarea 2.3 - Registrar resultado del upgrade en BBDD
      community.mysql.mysql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_name }}"
        query: >
          INSERT INTO {{ db_table }} (
            host_id, playbook, playbook_uid, task_name, is_ok, task_message, help_message, created, modified
          ) VALUES (
            {{ hostvars[inventory_hostname].equipo_id | default('NULL') }},
            '{{ playbook_nombre }}',
            '{{ playbook_id }}',
            '{{ tarea_2 }}',
            {{ is_ok_2 | default(1) }},
            '{{ {"stdout": resultado_tarea_2.stdout | default(""), "stderr": resultado_tarea_2.stderr | default(""), "rc": resultado_tarea_2.rc | default(-1)} | to_json | replace("'", "''") }}'
            '{{ help_message_2 | default("") | replace("'", "''") }}',
            NOW(),
            NOW()
          );
      delegate_to: localhost
      become: false

# ---------------- REINICIO ----------------
    - name: Tarea 3.1 - Forzar reinicio si se ha ejecutado upgrade
      ansible.builtin.reboot:
        msg: "Reinicio tras do-release-upgrade"
        connect_timeout: 5
        reboot_timeout: 600
      when: resultado_tarea_2 is defined and resultado_tarea_2.rc == 0
      register: resultado_tarea_3
      ignore_errors: true

    - name: Tarea 3.2 - Mensaje de ayuda si falla el reinicio
      set_fact:
        is_ok_3: 0
        help_message_3: "Verifica si el sistema quedó en estado inestable tras el upgrade."
      when: resultado_tarea_3.unreachable | default(false) or
            (resultado_tarea_3.rc is defined and resultado_tarea_3.rc != 0)

    - name: Tarea 3.3 - Registrar reinicio en BBDD
      community.mysql.mysql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_name }}"
        query: >
          INSERT INTO {{ db_table }} (
            host_id, playbook, playbook_uid, task_name, is_ok, task_message, help_message, created, modified
          ) VALUES (
            {{ hostvars[inventory_hostname].equipo_id | default('NULL') }},
            '{{ playbook_nombre }}',
            '{{ playbook_id }}',
            '{{ tarea_3 }}',
            {{ is_ok_3 | default(1) }},
            '{{ {"msg": resultado_tarea_3.msg | default("No reinicio necesario")} | to_json | replace("'", "''") }}',
            '{{ help_message_3 | default("") | replace("'", "''") }}',
            NOW(),
            NOW()
          );
      delegate_to: localhost
      become: false
